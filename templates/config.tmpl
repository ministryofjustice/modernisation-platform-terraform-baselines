## This file is automatically generated based on what regions are enabled in an AWS account and what regions Config is available in.

data "aws_caller_identity" "current" {}

# AWS Config: Configure a role using eu-west-2
resource "aws_iam_role" "config" {
  provider           = aws.${baseline_provider_key}-eu-west-2
  name               = "AWSConfig"
  assume_role_policy = data.aws_iam_policy_document.assume_role_policy.json
  tags               = var.baseline_tags
}

data "aws_iam_policy_document" "assume_role_policy" {
  version = "2012-10-17"
  statement {
    sid     = "AllowAWSConfigAssumeRole"
    actions = ["sts:AssumeRole"]
    effect  = "Allow"

    principals {
      type        = "Service"
      identifiers = ["config.amazonaws.com"]
    }
  }
}

resource "aws_iam_role_policy_attachment" "managed_policy" {
  provider   = aws.${baseline_provider_key}-eu-west-2
  role       = aws_iam_role.config.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSConfigRole"
}

# AWS Config: Configure an S3 bucket in eu-west-2
resource "aws_s3_bucket" "config" {
  provider      = aws.${baseline_provider_key}-eu-west-2
  bucket_prefix = "config-"
  acl           = "private"

  server_side_encryption_configuration {
    rule {
      apply_server_side_encryption_by_default {
        sse_algorithm = "aws:kms"
      }
    }
  }

  versioning {
    enabled = true
  }

  lifecycle {
    prevent_destroy = true
  }

  tags = var.baseline_tags
}

resource "aws_s3_bucket_public_access_block" "config" {
  provider                = aws.${baseline_provider_key}-eu-west-2
  bucket                  = aws_s3_bucket.config.bucket
  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
}

resource "aws_s3_bucket_policy" "config_bucket" {
  provider = aws.${baseline_provider_key}-eu-west-2
  bucket   = aws_s3_bucket.config.bucket
  policy   = data.aws_iam_policy_document.config_bucket.json
}

data "aws_iam_policy_document" "config_bucket" {
  version   = "2012-10-17"
  policy_id = "ConfigBucketPolicy"

  statement {
    sid       = "AWSConfigBucketPermissionsCheck"
    effect    = "Allow"
    actions   = ["s3:GetBucketAcl"]
    resources = [aws_s3_bucket.config.arn]

    principals {
      identifiers = ["config.amazonaws.com"]
      type        = "Service"
    }

    condition {
      test     = "Bool"
      variable = "aws:SecureTransport"
      values   = ["true"]
    }
  }

  statement {
    sid     = "AWSConfigBucketDelivery"
    effect  = "Allow"
    actions = ["s3:PutObject"]
    resources = [
      "$${aws_s3_bucket.config.arn}/*"
    ]

    principals {
      identifiers = ["config.amazonaws.com"]
      type        = "Service"
    }

    condition {
      test     = "StringEquals"
      values   = ["bucket-owner-full-control"]
      variable = "s3:x-amz-acl"
    }

    condition {
      test     = "Bool"
      variable = "aws:SecureTransport"
      values   = ["true"]
    }
  }

  statement {
    sid     = "Require SSL"
    effect  = "Deny"
    actions = ["s3:*"]
    resources = [
      "$${aws_s3_bucket.config.arn}/*"
    ]
    principals {
      identifiers = ["*"]
      type        = "AWS"
    }
    condition {
      test     = "Bool"
      variable = "aws:SecureTransport"
      values   = ["false"]
    }
  }
}

%{ for account_region in account_regions ~}
%{ if contains(service_regions, account_region) ~}
# Enable Config in each available region
resource "aws_config_configuration_recorder" "${baseline_provider_key}-${account_region}" {
  provider = aws.${baseline_provider_key}-${account_region}
  name     = "config"
  role_arn = aws_iam_role.config.arn

  recording_group {
    all_supported                 = true
    include_global_resource_types = true
  }
}

resource "aws_config_delivery_channel" "${baseline_provider_key}-${account_region}" {
  provider       = aws.${baseline_provider_key}-${account_region}
  name           = "config"
  s3_bucket_name = aws_s3_bucket.config.id
  s3_key_prefix  = "${baseline_provider_key}-${account_region}"
  sns_topic_arn  = aws_sns_topic.${baseline_provider_key}-${account_region}.arn

  snapshot_delivery_properties {
    delivery_frequency = "Three_Hours"
  }

  depends_on = [aws_config_configuration_recorder.${baseline_provider_key}-${account_region}]
}

resource "aws_config_configuration_recorder_status" "${baseline_provider_key}-${account_region}" {
  provider   = aws.${baseline_provider_key}-${account_region}
  name       = "config"
  is_enabled = true
  depends_on = [aws_config_delivery_channel.${baseline_provider_key}-${account_region}]
}

# Create an SNS topic for each region
resource "aws_sns_topic" "${baseline_provider_key}-${account_region}" {
  provider = aws.${baseline_provider_key}-${account_region}
  name     = "config"
  tags     = var.baseline_tags
}

resource "aws_sns_topic_policy" "${baseline_provider_key}-${account_region}" {
  provider = aws.${baseline_provider_key}-${account_region}
  arn      = aws_sns_topic.${baseline_provider_key}-${account_region}.arn
  policy   = data.aws_iam_policy_document.sns_topic_policy-${baseline_provider_key}-${account_region}.json
}

data "aws_iam_policy_document" "sns_topic_policy-${baseline_provider_key}-${account_region}" {
  statement {
    actions = [
      "SNS:Subscribe",
      "SNS:SetTopicAttributes",
      "SNS:RemovePermission",
      "SNS:Receive",
      "SNS:Publish",
      "SNS:ListSubscriptionsByTopic",
      "SNS:GetTopicAttributes",
      "SNS:DeleteTopic",
      "SNS:AddPermission",
    ]
    condition {
      test     = "StringEquals"
      variable = "AWS:SourceOwner"
      values   = [data.aws_caller_identity.current.account_id]
    }
    effect = "Allow"

    principals {
      type        = "AWS"
      identifiers = ["*"]
    }
    resources = [aws_sns_topic.${baseline_provider_key}-${account_region}.arn]
    sid       = "DefaultSNSPolicy"
  }

  statement {
    actions = ["SNS:Publish"]
    effect  = "Allow"
    principals {
      type        = "AWS"
      identifiers = [aws_iam_role.config.arn]
    }
    resources = [aws_sns_topic.${baseline_provider_key}-${account_region}.arn]
    sid       = "AWSConfigSNSPolicyAllowRole"
  }
}

# Configure AWS Config rules
resource "aws_config_config_rule" "access-keys-rotated" {
  provider                    = aws.${baseline_provider_key}-${account_region}
  name                        = "access-keys-rotated"
  maximum_execution_frequency = "TwentyFour_Hours"

  input_parameters = jsonencode({
    maxAccessKeyAge : "90"
  })

  source {
    owner             = "AWS"
    source_identifier = "ACCESS_KEYS_ROTATED"
  }

  depends_on = [aws_config_configuration_recorder.${baseline_provider_key}-${account_region}]

  tags = var.baseline_tags
}

resource "aws_config_config_rule" "account-part-of-organizations" {
  provider                    = aws.${baseline_provider_key}-${account_region}
  name                        = "account-part-of-organizations"
  maximum_execution_frequency = "TwentyFour_Hours"

  input_parameters = jsonencode({
    MasterAccountId : var.baseline_root_account_id
  })

  source {
    owner             = "AWS"
    source_identifier = "ACCOUNT_PART_OF_ORGANIZATIONS"
  }

  depends_on = [aws_config_configuration_recorder.${baseline_provider_key}-${account_region}]

  tags = var.baseline_tags
}

resource "aws_config_config_rule" "cloud-trail-cloud-watch-logs-enabled" {
  provider                    = aws.${baseline_provider_key}-${account_region}
  name                        = "cloud-trail-cloud-watch-logs-enabled"
  maximum_execution_frequency = "TwentyFour_Hours"

  source {
    owner             = "AWS"
    source_identifier = "CLOUD_TRAIL_CLOUD_WATCH_LOGS_ENABLED"
  }

  depends_on = [aws_config_configuration_recorder.${baseline_provider_key}-${account_region}]

  tags = var.baseline_tags
}

resource "aws_config_config_rule" "cloud-trail-encryption-enabled" {
  provider                    = aws.${baseline_provider_key}-${account_region}
  name                        = "cloud-trail-encryption-enabled"
  maximum_execution_frequency = "TwentyFour_Hours"

  source {
    owner             = "AWS"
    source_identifier = "CLOUD_TRAIL_ENCRYPTION_ENABLED"
  }

  depends_on = [aws_config_configuration_recorder.${baseline_provider_key}-${account_region}]

  tags = var.baseline_tags
}

resource "aws_config_config_rule" "cloud-trail-log-file-validation-enabled" {
  provider                    = aws.${baseline_provider_key}-${account_region}
  name                        = "cloud-trail-log-file-validation-enabled"
  maximum_execution_frequency = "TwentyFour_Hours"

  source {
    owner             = "AWS"
    source_identifier = "CLOUD_TRAIL_LOG_FILE_VALIDATION_ENABLED"
  }

  depends_on = [aws_config_configuration_recorder.${baseline_provider_key}-${account_region}]

  tags = var.baseline_tags
}

resource "aws_config_config_rule" "iam-group-has-users-check" {
  provider = aws.${baseline_provider_key}-${account_region}
  name     = "iam-group-has-users-check"

  source {
    owner             = "AWS"
    source_identifier = "IAM_GROUP_HAS_USERS_CHECK"
  }

  depends_on = [aws_config_configuration_recorder.${baseline_provider_key}-${account_region}]

  tags = var.baseline_tags
}

resource "aws_config_config_rule" "iam-no-inline-policy-check" {
  provider = aws.${baseline_provider_key}-${account_region}
  name     = "iam-no-inline-policy-check"

  source {
    owner             = "AWS"
    source_identifier = "IAM_NO_INLINE_POLICY_CHECK"
  }

  depends_on = [aws_config_configuration_recorder.${baseline_provider_key}-${account_region}]

  tags = var.baseline_tags
}

resource "aws_config_config_rule" "iam-password-policy" {
  provider                    = aws.${baseline_provider_key}-${account_region}
  name                        = "iam-password-policy"
  maximum_execution_frequency = "TwentyFour_Hours"

  input_parameters = jsonencode({
    RequireUppercaseCharacters : "true",
    RequireLowercaseCharacters : "true",
    RequireSymbols : "true",
    RequireNumbers : "true",
    MinimumPasswordLength : "8",
    PasswordReusePrevention : "5",
    MaxPasswordAge : "0",
  })

  source {
    owner             = "AWS"
    source_identifier = "IAM_PASSWORD_POLICY"
  }

  depends_on = [aws_config_configuration_recorder.${baseline_provider_key}-${account_region}]

  tags = var.baseline_tags
}

resource "aws_config_config_rule" "iam-root-access-key-check" {
  provider                    = aws.${baseline_provider_key}-${account_region}
  name                        = "iam-root-access-key-check"
  maximum_execution_frequency = "TwentyFour_Hours"

  source {
    owner             = "AWS"
    source_identifier = "IAM_ROOT_ACCESS_KEY_CHECK"
  }

  depends_on = [aws_config_configuration_recorder.${baseline_provider_key}-${account_region}]

  tags = var.baseline_tags
}

resource "aws_config_config_rule" "iam-user-mfa-enabled" {
  provider                    = aws.${baseline_provider_key}-${account_region}
  name                        = "iam-user-mfa-enabled"
  maximum_execution_frequency = "TwentyFour_Hours"

  source {
    owner             = "AWS"
    source_identifier = "IAM_USER_MFA_ENABLED"
  }

  depends_on = [aws_config_configuration_recorder.${baseline_provider_key}-${account_region}]

  tags = var.baseline_tags
}

resource "aws_config_config_rule" "iam-user-unused-credentials-check" {
  provider                    = aws.${baseline_provider_key}-${account_region}
  name                        = "iam-user-unused-credentials-check"
  maximum_execution_frequency = "TwentyFour_Hours"

  input_parameters = jsonencode({
    maxCredentialUsageAge : "30"
  })

  source {
    owner             = "AWS"
    source_identifier = "IAM_USER_UNUSED_CREDENTIALS_CHECK"
  }

  depends_on = [aws_config_configuration_recorder.${baseline_provider_key}-${account_region}]

  tags = var.baseline_tags
}

resource "aws_config_config_rule" "mfa-enabled-for-iam-console-access" {
  provider                    = aws.${baseline_provider_key}-${account_region}
  name                        = "mfa-enabled-for-iam-console-access"
  maximum_execution_frequency = "TwentyFour_Hours"

  source {
    owner             = "AWS"
    source_identifier = "MFA_ENABLED_FOR_IAM_CONSOLE_ACCESS"
  }

  depends_on = [aws_config_configuration_recorder.${baseline_provider_key}-${account_region}]

  tags = var.baseline_tags
}

resource "aws_config_config_rule" "required-tags" {
  provider = aws.${baseline_provider_key}-${account_region}
  name     = "required-tags"

  input_parameters = jsonencode({
    tag1Key : "business-unit",
    tag2Key : "application",
    tag3Key : "owner",
    tag4Key : "is-production"
  })

  source {
    owner             = "AWS"
    source_identifier = "REQUIRED_TAGS"
  }

  depends_on = [aws_config_configuration_recorder.${baseline_provider_key}-${account_region}]

  tags = var.baseline_tags
}

resource "aws_config_config_rule" "root-account-mfa-enabled" {
  provider                    = aws.${baseline_provider_key}-${account_region}
  name                        = "root-account-mfa-enabled"
  maximum_execution_frequency = "TwentyFour_Hours"

  source {
    owner             = "AWS"
    source_identifier = "ROOT_ACCOUNT_MFA_ENABLED"
  }

  depends_on = [aws_config_configuration_recorder.${baseline_provider_key}-${account_region}]

  tags = var.baseline_tags
}

resource "aws_config_config_rule" "s3-account-level-public-access-blocks" {
  provider = aws.${baseline_provider_key}-${account_region}
  name     = "s3-account-level-public-access-blocks"

  source {
    owner             = "AWS"
    source_identifier = "S3_ACCOUNT_LEVEL_PUBLIC_ACCESS_BLOCKS"
  }

  depends_on = [aws_config_configuration_recorder.${baseline_provider_key}-${account_region}]

  tags = var.baseline_tags
}

resource "aws_config_config_rule" "s3-bucket-public-read-prohibited" {
  provider = aws.${baseline_provider_key}-${account_region}
  name     = "s3-bucket-public-read-prohibited"

  source {
    owner             = "AWS"
    source_identifier = "S3_BUCKET_PUBLIC_READ_PROHIBITED"
  }

  depends_on = [aws_config_configuration_recorder.${baseline_provider_key}-${account_region}]

  tags = var.baseline_tags
}

resource "aws_config_config_rule" "s3-bucket-public-write-prohibited" {
  provider = aws.${baseline_provider_key}-${account_region}
  name     = "s3-bucket-public-write-prohibited"

  source {
    owner             = "AWS"
    source_identifier = "S3_BUCKET_PUBLIC_WRITE_PROHIBITED"
  }

  depends_on = [aws_config_configuration_recorder.${baseline_provider_key}-${account_region}]

  tags = var.baseline_tags
}

resource "aws_config_config_rule" "s3-bucket-server-side-encryption-enabled" {
  provider = aws.${baseline_provider_key}-${account_region}
  name     = "s3-bucket-server-side-encryption-enabled"

  source {
    owner             = "AWS"
    source_identifier = "S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED"
  }

  depends_on = [aws_config_configuration_recorder.${baseline_provider_key}-${account_region}]

  tags = var.baseline_tags
}

resource "aws_config_config_rule" "s3-bucket-ssl-requests-only" {
  provider = aws.${baseline_provider_key}-${account_region}
  name     = "s3-bucket-ssl-requests-only"

  source {
    owner             = "AWS"
    source_identifier = "S3_BUCKET_SSL_REQUESTS_ONLY"
  }

  depends_on = [aws_config_configuration_recorder.${baseline_provider_key}-${account_region}]

  tags = var.baseline_tags
}

resource "aws_config_config_rule" "securityhub-enabled" {
  provider                    = aws.${baseline_provider_key}-${account_region}
  name                        = "securityhub-enabled"
  maximum_execution_frequency = "TwentyFour_Hours"

  source {
    owner             = "AWS"
    source_identifier = "SECURITYHUB_ENABLED"
  }

  depends_on = [aws_config_configuration_recorder.${baseline_provider_key}-${account_region}]

  tags = var.baseline_tags
}

resource "aws_config_config_rule" "sns-encrypted-kms" {
  provider = aws.${baseline_provider_key}-${account_region}
  name     = "sns-encrypted-kms"

  source {
    owner             = "AWS"
    source_identifier = "SNS_ENCRYPTED_KMS"
  }

  depends_on = [aws_config_configuration_recorder.${baseline_provider_key}-${account_region}]

  tags = var.baseline_tags
}

%{ else ~}
%{ endif ~}
%{ endfor ~}
